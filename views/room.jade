doctype html
html
    head
        title Hackerhire
        link(rel='stylesheet',href='/stylesheets/room.css')
        script(type="text/javascript", src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.14/peer.js")
        script(type="text/javascript", src="https://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js")
        script.
            // Compatibility shim
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            // PeerJS object
            var peer = new Peer({host : location.hostname, port : location.port, path : "/peer", debug: 3});
            peer.on('open', function () {
                $('#my-id').text(peer.id);
            });
            // Receiving a call
            peer.on('call', function (call) {
                // Answer the call automatically (instead of prompting user) for demo purposes
                call.answer(window.localStream);
                step3(call);
            });
            peer.on('error', function (err) {
                alert(err.message);
                // Return to step 2 if error occurs
                step2();
            });
            // Click handlers setup
            $(function () {
                $('#make-call').click(function () {
                    // Initiate a call!
                    var call = peer.call($('#callto-id').val(), window.localStream);
                    step3(call);
                });
                $('#end-call').click(function () {
                    window.existingCall.close();
                    step2();
                });
                // Retry if getUserMedia fails
                $('#step1-retry').click(function () {
                    $('#step1-error').hide();
                    step1();
                });
                // Get things started
                step1();
            });
            function step1() {
                // Get audio/video stream
                navigator.getUserMedia({audio: true, video: true}, function (stream) {
                    // Set your video displays
                    $('#my-video').prop('src', URL.createObjectURL(stream));
                    window.localStream = stream;
                    step2();
                }, function () {
                    $('#step1-error').show();
                });
            }
            function step2() {
                $('#step1, #step3').hide();
                $('#step2').show();
            }
            function step3(call) {
                // Hang up on an existing call if present
                if (window.existingCall) {
                    window.existingCall.close();
                }
                // Wait for stream on the call, then set peer video display
                call.on('stream', function (stream) {
                    $('#their-video').prop('src', URL.createObjectURL(stream));
                });
                // UI stuff
                window.existingCall = call;
                $('#their-id').text(call.peer);
                call.on('close', step2);
                $('#step1, #step2').hide();
                $('#step3').show();
            }
    body
        div.pure-g
            div.pure-u-2-3#video-container
                video#their-video(autoplay=true)
                video#my-video(autoplay=true, muted=true)
            div.pure-u-1-3
                h2 PeerJS video chat
                div#step1
                    p Please click allow on top of the screen so we can access your webcam and microphone for calls
                    div#step1-error
                        p Failed to access the webcam and microphone. Make sure to ru this demo on an http server and click allow when asked for permission by browser
                        a.pure-button.pure-button-error#step1-retry(href="#") Try again
                div#step2
                    p Your id
                        span#my-id ...
                    p Share this id with others so they can call you
                    h3 make a call
                    div.pure-form
                        input#callto-id(type="text", placeholder="Call userid ...")
                        a.pure-button.pure-button-success#make-call(href="#") Call
                div#step3
                    p Currently in call with
                        span#their-id ...
                    p
                        a.pure-button.pure-button-error#end-call(href="#") End call

